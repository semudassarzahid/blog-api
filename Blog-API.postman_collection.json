{
	"info": {
		"_postman_id": "029a4842-5909-443f-a589-94c80294c318",
		"name": "Blog-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26114867"
	},
	"item": [
		{
			"name": "Posts",
			"item": [
				{
					"name": "Create Post (GQL)",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "operations",
									"value": "{\"query\":\" mutation createPost($createPostInput: CreatePostInput!) { createPost(createPostInput: $createPostInput) { status message post { id title description published publishedAt slug postMediaType postMedia trashed author { id firstName lastName email isActive } } } }\",\"variables\":{\"createPostInput\":{\"title\":\"{{$randomJobTitle}}\",\"description\":\"{{$randomLoremParagraph}}\",\"mediaType\":\"image\",\"published\":true,\"mediaFile\":null}}}",
									"type": "text"
								},
								{
									"key": "map",
									"value": "{\"0\":[\"variables.createPostInput.mediaFile\"]}",
									"type": "text"
								},
								{
									"key": "0",
									"type": "file",
									"src": "/home/zeeshan-iqbaal/Pictures/Screenshots/Screenshot from 2023-03-13 18-50-40.png"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Post (GQL)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePost($updatePostInput: UpdatePostInput!){\n    updatePost(updatePostInput: $updatePostInput) {\n        post {\n            id\n            title\n            description\n            published\n            publishedAt\n            slug\n            postMediaType\n            postMedia\n            trashed\n            author {\n                id\n                firstName\n                lastName\n                email\n                isActive\n            }\n        }\n    }\n}",
								"variables": "{\n    \"updatePostInput\": {\n      \"id\": \"768ad4da-7991-44e9-9832-aadfe50f6e74\",\n      \"slug\": \"international-branding-officer-bemmsn\",\n      \"title\": \"updating title {{$randomFileName}}\",\n      \"description\": \"updating description 1\",\n      \"published\": true\n    }\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Post (GQL)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query findAllPosts {\n    findAllPosts {\n        status\n        message\n        posts {\n            title\n            description\n            published\n            publishedAt\n            slug\n            postMediaType\n            postMedia\n            trashed\n            author {\n                id\n                firstName\n                lastName\n                email\n                isActive\n                createdAt\n                updatedAt\n            }\n        }\n    }\n}\n\n# query {\n#     findAll\n# }",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post (GQL)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query findOnePost($id: ID!) {\n    findOnePost(id: $id) {\n        status\n        message\n        post {\n            title\n            description\n            published\n            publishedAt\n            slug\n            postMediaType\n            postMedia\n            trashed\n            author {\n                id\n                firstName\n                lastName\n                email\n                isActive\n                createdAt\n                updatedAt\n            }\n        }\n    }\n}\n\n# query {\n#     findAll\n# }",
								"variables": "{\n    \"id\": \"768ad4da-7991-44e9-9832-aadfe50f6e74\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Post (GQL)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation removePost($id: ID!){\n    removePost(id: $id) {\n        status\n        message\n        deleted\n    }\n}",
								"variables": "{\n    \"id\": \"f362ef6b-e1f8-4518-88f1-8babf225c21c\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Posts (GQL)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query searchPost($search: String!){\n    searchPost(search: $search) {\n        status\n        message\n        total\n        posts {\n            id\n            title\n            description\n            published\n            publishedAt\n            slug\n            postMediaType\n            postMedia\n            author {\n                id\n                firstName\n                lastName\n                email\n                isActive\n                role\n            }\n        }\n    }\n}",
								"variables": "{\n    \"search\": \"direct\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Paginate Posts (GQL)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query list($page: Int!, $limit: Int!){\n    list(page: $page, limit: $limit) {\n        status\n        message\n        total\n        posts {\n            id\n            title\n            description\n            published\n            publishedAt\n            slug\n            postMediaType\n            postMedia\n            author {\n                id\n                firstName\n                lastName\n                email\n                isActive\n                role\n            }\n        }\n    }\n}",
								"variables": "{\n    \"page\": 1,\n    \"limit\": 5\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Image",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "operations",
									"value": "{ \"query\": \"mutation ($fileInput: FileInput!) { uploadFile(fileInput: $fileInput) }\", \"variables\": { \"fileInput\": {\"file\": null} } }",
									"type": "text"
								},
								{
									"key": "map",
									"value": "{\"0\": [\"variables.fileInput.file\"]}",
									"type": "text"
								},
								{
									"key": "0",
									"type": "file",
									"src": "/home/zeeshan-iqbaal/Pictures/Screenshots/Screenshot from 2023-03-13 18-50-40.png"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Create Category (GQL)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createCategory($createCategoryInput: CreateCategoryInput!){\n    createCategory(createCategoryInput: $createCategoryInput) {\n        status\n        message\n        category {\n            id\n            title\n            description\n            createdAt\n        }\n    }\n}",
								"variables": "{\n    \"createCategoryInput\": {\n      \"title\": \"{{$randomFirstName}}\",\n      \"description\": \"{{$randomLoremParagraph}}\"\n    }\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Category (GQL)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateCategory($updateCategoryInput: UpdateCategoryInput!){\n    updateCategory(updateCategoryInput: $updateCategoryInput) {\n        status\n        message\n        category {\n            title\n            description\n        }\n    }\n}",
								"variables": "{\n    \"updateCategoryInput\": {\n      \"id\": \"4341fa2d-d76e-4376-b907-92ab3f334189\",\n      \"title\": \"IT\",\n      \"description\": \"updating description 1213123\"\n    }\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Category (GQL)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation removeCategory($id: ID!){\n    removeCategory(id: $id) {\n        status\n        message\n        deleted\n    }\n}",
								"variables": "{\n    \"id\": \"4341fa2d-d76e-4376-b907-92ab3f334189\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Categories (GQL)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query findAllCategories {\n    findAllCategories {\n        status\n        message\n        categories {\n            id\n            title\n            description\n        }\n    }\n}\n\n# query {\n#     findAll\n# }",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Category (GQL)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query findOneCategory($id: ID!) {\n    findOneCategory(id: $id) {\n        status\n        message\n        category {\n            title\n            description\n            createdAt\n            updatedAt\n        }\n    }\n}\n\n# query {\n#     findAll\n# }",
								"variables": "{\n    \"id\": \"4341fa2d-d76e-4376-b907-92ab3f334189\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Category (GQL)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query searchCategories($search: String!){\n    searchCategories(search: $search) {\n        status\n        message\n        total\n        categories {\n            id\n            title\n            description\n        }\n    }\n}",
								"variables": "{\n    \"search\": \"quam\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Create Comment (GQL)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createComment($createCommentInput: CreateCommentInput!){\n    createComment(createCommentInput: $createCommentInput) {\n        status\n        message\n        comment {\n            id\n            message\n            createdAt\n            post {\n                title\n                description\n                published\n                author{\n                    id\n                    firstName\n                    lastName\n                    email\n                }\n            }\n            author {\n                id\n                firstName\n                lastName\n                email\n            }\n        }\n    }\n}",
								"variables": "{\n    \"createCommentInput\": {\n      \"message\": \"{{$randomLoremSentences}}\",\n      \"postId\": \"fcb3546c-e65d-449b-a1b5-5c847a930512\"\n    }\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Reply Comment (GQL)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createComment($createCommentInput: CreateCommentInput!){\n    createComment(createCommentInput: $createCommentInput) {\n        status\n        message\n        comment {\n            id\n            message\n            createdAt\n            post {\n                title\n                description\n                published\n                author{\n                    id\n                    firstName\n                    lastName\n                    email\n                }\n            }\n            author {\n                id\n                firstName\n                lastName\n                email\n            }\n        }\n    }\n}",
								"variables": "{\n    \"createCommentInput\": {\n      \"message\": \"{{$randomLoremSentences}}\",\n      \"postId\": \"fcb3546c-e65d-449b-a1b5-5c847a930512\",\n      \"parentId\": \"99530ab5-0538-4700-9ca9-d5107b428ccc\"\n    }\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Comment (GQL)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateComment($updateCommentInput: UpdateCommentInput!){\n    updateComment(updateCommentInput: $updateCommentInput) {\n        status\n        message\n        comment {\n            id\n            message\n            post {\n                id\n                title\n            }\n            author {\n                id\n                firstName\n                lastName\n                email\n            }\n        }\n    }\n}",
								"variables": "{\n    \"updateCommentInput\": {\n      \"id\": \"99530ab5-0538-4700-9ca9-d5107b428ccc\",\n      \"message\": \"IT\"\n    }\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Comment (GQL)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation removeComment($id: ID!){\n    removeComment(id: $id) {\n        status\n        message\n        deleted\n    }\n}",
								"variables": "{\n    \"id\": \"fd15c4ad-a1df-471d-af82-a1442978f942\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment (GQL)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query findOneComment($id: ID!) {\n    findOneComment(id: $id) {\n        status\n        message\n        comment {\n            id\n            message\n            post {\n                id\n                title\n                description\n            }\n            author {\n                id\n                firstName\n                lastName\n                email\n            }\n        }\n    }\n}\n\n# query {\n#     findAll\n# }",
								"variables": "{\n    \"id\": \"cc97754d-a950-4681-bc3d-f2b83132d1b2\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post Comments (GQL)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query getPostComments($postId: ID!) {\n    getPostComments(postId: $postId) {\n        status\n        message\n        total\n        comments {\n            id\n            replies {\n                id\n                replies {\n                    id\n                    replies {\n                        id\n                        replies {\n                            id\n                            replies {\n                                id\n                            }\n                        }\n                    }\n                }\n            }\n            reply {\n                id\n            }\n        }\n    }\n}\n\n# query {\n#     findAll\n# }",
								"variables": "{\n    \"postId\": \"fcb3546c-e65d-449b-a1b5-5c847a930512\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:3000/graphql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Register(Rest)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Your test name\", function () {",
							"    var jsonData = pm.response.json();",
							"    console.log(jsonData);",
							"    pm.environment.set(\"email\", jsonData.user.email);",
							"    pm.environment.set(\"password\", \"Password@123\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"Password@123\",\n    \"confirmPassword\": \"Password@123\",\n    \"role\": \"ADMIN\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/user/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register(GraphQL)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Your test name\", function () {",
							"    var jsonData = pm.response.json();",
							"    console.log(jsonData);",
							"    pm.environment.set(\"email\", jsonData.data.register.user.email);",
							"    pm.environment.set(\"password\", \"Password@123\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation Register($data: UserRegisterReqDto!){\n    register(data: $data){\n        status\n        message\n        user {\n            id\n            firstName\n            lastName\n            email\n            isActive\n            role\n            password\n        }\n    }\n}\n\n# query {\n#     Register($data: UserRegisterReqDto!) {\n#         register(data: $data){\n#             status\n#             message\n#             user {\n#                 firstName\n#                 lastName\n#                 email\n#             }\n#         }\n#     }\n# }",
						"variables": "{\n    \"data\": {\n        \"firstName\": \"{{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"email\": \"{{$randomEmail}}\",\n        \"password\":\"Password@123\",\n        \"confirmPassword\":\"Password@123\",\n        \"role\": \"NORMAL_USER\"\n    }\n}"
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login(GraphQL)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Your test name\", function () {",
							"    var jsonData = pm.response.json();",
							"    console.log(jsonData.data);",
							"    pm.environment.set(\"token\", jsonData.data.login.token);",
							"    //pm.expect(jsonData.value).to.eql(100);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# mutation Login($email: String!, $password: String!){\n#     login(email: $email, password: $password) {\n#         token\n#         message\n#         status\n#     }\n# }\nmutation {\n    login(email: \"{{email}}\", password: \"{{password}}\") {\n        token\n        message\n        status\n    }\n}",
						"variables": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}"
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User By ID (REST)",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/user/881dc29b-a371-40da-a91b-83598ec13ce2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user",
						"881dc29b-a371-40da-a91b-83598ec13ce2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User (GraphQL)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query getUser{\n    getUser {\n        user {\n            id\n            firstName\n            lastName\n            email\n            isActive\n            role\n        }\n        message\n        status\n    }\n}\n\n# query {\n#     getUser{\n#         status\n#         message\n#         user{\n#             firstName\n#         }\n#     }\n# }",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Logged In Admin (GraphQL)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\n    getAdmin{\n        status\n        user{\n        firstName\n        email\n        role\n        }\n        message\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Logged In user (GraphQL)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\n    getAuthLoggedUser{\n        status\n        user{\n        firstName\n        email\n        role\n        }\n        message\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Passport local strategy  (REST)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/user/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Index (REST)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/user/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Index  Passport JWT (REST)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/user/getPassportJwtUser",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user",
						"getPassportJwtUser"
					]
				}
			},
			"response": []
		},
		{
			"name": "Index (GraphQL)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\n  index\n}",
						"variables": "{\n    \"username\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}"
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "localStrategyLogin (GraphQL)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# mutation localStrategyLogin($username: String!, $password: String!){\n#   localStrategyLogin(username: $username, password: $password){\n#     status\n#     message\n#     user{\n#       firstName\n#       lastName\n#       email\n#       role\n#     }\n#   }\n# }\n\nmutation {\n    localStrategyLogin(username: \"{{email}}\", password: \"{{password}}\"){\n        status\n        message\n        user{\n            id\n            firstName\n            lastName\n            email\n            role\n            password\n        }\n    }\n}\n",
						"variables": "{\n    \"username\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}"
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "localStrategyGetUser (GraphQL)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# mutation localStrategyGetUser($username: String!, $password: String!){\n#   localStrategyGetUser(username: $username, password: $password){\n#     status\n#     message\n#     user{\n#       firstName\n#       lastName\n#       email\n#       role\n#     }\n#   }\n# }\n\nmutation {\n    localStrategyGetUser(username: \"{{email}}\", password: \"{{password}}\"){\n        user{\n            id\n            firstName\n            lastName\n            email\n            role\n            password\n        }\n    }\n}\n",
						"variables": "{\n    \"username\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}"
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "jwtLogin (GraphQL)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\n    jwtLogin(username: \"{{email}}\", password: \"{{password}}\"){\n        status\n        message\n        token\n    }\n}\n",
						"variables": "{\n    \"username\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}"
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "jwtStrategyGetUser (GraphQL)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# query jwtStrategyGetUser{\n#   jwtStrategyGetUser{\n#     status\n#     message\n#     user{\n#       firstName\n#       lastName\n#       email\n#       role\n#     }\n#   }\n# }\n\nquery {\n    jwtStrategyGetUser {\n        status\n        message\n        user{\n            firstName\n            lastName\n            email\n            role\n        }\n    }\n}\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Profile Image Upload",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "operations",
							"value": "{\"query\":\"mutation ($fileInput: FileInput!) { uploadFile(fileInput: $fileInput) }\", \"variables\":{\"fileInput\":{\"file\": null} }}",
							"type": "text"
						},
						{
							"key": "map",
							"value": "{\"0\":[\"variables.fileInput.file\"]}",
							"type": "text"
						},
						{
							"key": "0",
							"contentType": "multipart/form-data",
							"type": "file",
							"src": "/home/zeeshan-iqbaal/Pictures/Screenshots/Screenshot from 2023-03-13 18-50-40.png"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		}
	]
}