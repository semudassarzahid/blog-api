# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserJwtPayloadDto {
  id: Int
  firstName: String
  lastName: String
  email: String
  role: String
  password: String
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Comment {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  message: String
  author: UserJwtPayloadDto
  likes: Int
  dislikes: Int
  post: Post
  parent: Comment
  replies: [Comment!]
}

type Category {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  title: String
  description: String
}

type Post {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  title: String!
  description: String!
  published: Boolean!
  publishedAt: DateTime
  slug: String
  trashed: DateTime
  postMedia: String
  postMediaType: String
  author: UserJwtPayloadDto
}

type UserRegisterResponseDto {
  status: Float
  message: String
  deleted: Boolean
  user: UserJwtPayloadDto
  token: String
}

type UserLoginResponseDto {
  status: Float
  message: String
  deleted: Boolean
  token: String!
}

type PostResponseDto {
  status: Float
  message: String
  deleted: Boolean
  post: Post
  posts: [Post!]
}

type CommentResponseDto {
  status: Float
  message: String
  deleted: Boolean
  comment: Comment
  comments: [Comment!]
  total: Int
}

type CategoryResponseDto {
  status: Float
  message: String
  deleted: Boolean
  category: Category
  categories: [Category!]
}

type Query {
  index: String!
  getUser: UserRegisterResponseDto!
  getAdmin: UserRegisterResponseDto!
  getAuthLoggedUser: UserRegisterResponseDto!
  jwtStrategyGetUser: UserRegisterResponseDto!
  findAllCategories: CategoryResponseDto!
  findOneCategory(id: Int!): CategoryResponseDto!
  post: [Post!]!
  findAllPosts: PostResponseDto!
  findOnePost(id: Int!): PostResponseDto!
  findOneComment(id: Int!): CommentResponseDto!
  getPostComments(postId: Int!): CommentResponseDto!
}

type Mutation {
  register(data: UserRegisterReqDto!): UserRegisterResponseDto!
  login(email: String!, password: String!): UserLoginResponseDto!
  localStrategyLogin(username: String!, password: String!): UserRegisterResponseDto!
  localStrategyGetUser(username: String!, password: String!): UserRegisterResponseDto!
  jwtLogin(username: String!, password: String!): UserRegisterResponseDto!
  createCategory(createCategoryInput: CreateCategoryInput!): CategoryResponseDto!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): CategoryResponseDto!
  removeCategory(id: Int!): CategoryResponseDto!
  createPost(createPostInput: CreatePostInput!): PostResponseDto!
  updatePost(updatePostInput: UpdatePostInput!): PostResponseDto!
  removePost(id: Int!): PostResponseDto!
  createComment(createCommentInput: CreateCommentInput!): CommentResponseDto!
  updateComment(updateCommentInput: UpdateCommentInput!): CommentResponseDto!
  removeComment(id: Int!): CommentResponseDto!
}

input UserRegisterReqDto {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  confirmPassword: String!
  role: String!
}

input CreateCategoryInput {
  title: String!
  description: String!
}

input UpdateCategoryInput {
  title: String
  description: String
  id: Int!
}

input CreatePostInput {
  title: String!
  description: String!
  published: Boolean! = false
}

input UpdatePostInput {
  title: String
  description: String
  published: Boolean = false
  id: Int!
  slug: String!
}

input CreateCommentInput {
  message: String!
  postId: Int
  parentId: Int
}

input UpdateCommentInput {
  message: String
  postId: Int
  parentId: Int
  id: Int!
}